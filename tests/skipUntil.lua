local Observable = require("reactivex.observable")
local Observer = require("reactivex.observer")
local Subscription = require("reactivex.subscription")
local Subject = require("reactivex.subjects.subject")

require('reactivex.operators.skipUntil')

describe('skipUntil', function()
  it('produces an error if its parent errors', function()
    local trigger = Observable.of()
    createSingleUseOperator(
      "simulateError", 
      function (destination)
        destination:onError()
      end
    )
    local observable = Observable.of(''):simulateError()
    expect(observable).to.produce.error()
    expect(observable:skipUntil(trigger)).to.produce.error()
  end)

  it('fails if the first argument is not an Observable', function()
    local observable = Observable.of(3)
    expect(observable:skipUntil(nil)).to.fail()
    expect(observable:skipUntil(0)).to.fail()
    expect(observable:skipUntil({})).to.fail()
  end)

  it('produces no values if the specified observable does not produce any values', function()
    local trigger = Observable.create(function() end)
    local observable = Observable.fromTable({2, 3, 4}):skipUntil(trigger)
    local onNext, onError, onCompleted = observableSpy(observable)
    expect(#onNext).to.equal(0)
    expect(#onError).to.equal(0)
    expect(#onCompleted).to.equal(0)
  end)

  it('produces values after the specified observable produces a value', function()
    local onNext = spy()
    local trigger = Subject.create()
    local subject = Subject.create()
    subject:skipUntil(trigger):subscribe(Observer.create(onNext))
    subject:onNext('a')
    subject:onNext('b')
    trigger:onNext('a')
    subject:onNext('c')
    subject:onNext('d')
    subject:onCompleted()
    expect(onNext).to.equal({{'c'}, {'d'}})
  end)

  it('produces all values if the specified observable fires immediately', function()
    local onNext = spy()
    local subject = Subject.create()
    subject:skipUntil(Observable.of(1)):subscribe(Observer.create(onNext))
    subject:onNext(1)
    subject:onNext(2)
    subject:onNext(3)
    subject:onCompleted()
    expect(onNext).to.equal({{1}, {2}, {3}})
  end)
end)
